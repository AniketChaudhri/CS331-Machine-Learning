{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "OmNiSiYaKrMa_Caltech_experiment-2.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "OrrM2wcBlWNI"
      },
      "outputs": [],
      "source": [
        "#importing libraries\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import math\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import PolynomialFeatures\n",
        "from sklearn.linear_model import LinearRegression"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#combination function(required for finding coefficients of Legendre's polynomial)\n",
        "def comb(n, k):\n",
        "  return math.factorial(n)/(math.factorial(k)*math.factorial(n-k))"
      ],
      "metadata": {
        "id": "g9fLcBECleQU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Generating coefficients of required Legendre's polynomial and normalizing it\n",
        "def generate_coeff(order):\n",
        "  coeff = np.zeros((order+1,1)) #coefficients\n",
        "  for i in range(int(order/2)+1):\n",
        "    coeff[order - 2*i] = (-1)**i*comb(order, i)*comb(2*order - 2*i, order)/2**order\n",
        "    coeff = coeff/np.linalg.norm(coeff)\n",
        "    #coeff[2] = coeff[2] + 2\n",
        "  return coeff"
      ],
      "metadata": {
        "id": "W4pBjOgsljBE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#function generating data points given sample size, coefficients of polynomial, order of polynomial, and the energy corresponding to noise(sigma^2)(0 means no noise)\n",
        "def generate_data(size, coeff, order, err_sig2):\n",
        "  X = np.random.uniform(-7, 7, size)                                            #uniformly distributed X ~ U[-7,7]   \n",
        "  X = np.array( sorted( X ))\n",
        "  #X = X/max(X)\n",
        "  X = np.array([X**i for i in range(0,order+1)]).T                              #generate nth order polynomial features \n",
        "\n",
        "  coeff = coeff.reshape(-1,1)\n",
        "\n",
        "  y = X @ coeff                                                                 #generating 'y' \n",
        "\n",
        "  if(err_sig2 != 0): y = y + np.random.normal(0,err_sig2, size).reshape(-1,1)   #adding noise as per specifications\n",
        "  \n",
        "  return X[:,1], y"
      ],
      "metadata": {
        "id": "SYtNei-_lmUF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Function to compute lms loss\n",
        "def error(a, b):\n",
        "  return (1/2)*(np.linalg.norm(a-b))**2"
      ],
      "metadata": {
        "id": "NpYiKr7ZmbXj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#defining function for fitting polynomial of given order given train and test data\n",
        "def poly_fit(data, order, y, dtest, ytest):\n",
        "  poly = PolynomialFeatures(degree = order)\n",
        "  X_poly = poly.fit_transform(data)\n",
        "  poly.fit(X_poly, y)\n",
        "  lin2 = LinearRegression()                                                     #using sklearn for polynomial fitting\n",
        "  lin2.fit(X_poly, y)\n",
        "  y_pred = lin2.predict(poly.fit_transform(dtest))\n",
        "  #Ein = error(y, lin2.predict(poly.fit_transform(data)))\n",
        "  Eout = error(y_pred, ytest)                                                   #calculating and returning errors(only test)\n",
        "  return Eout\n"
      ],
      "metadata": {
        "id": "ZCvavdxemi7O"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sigma_2 = np.linspace(0, 2.5, 100)                                              #taking various noise variances(energies)\n",
        "c = generate_coeff(20)                                                          #generating coefficients(20th order polynomial)\n",
        "Overfit_measure = []                                                            #list to store overfit measure values\n",
        "for sigma in sigma_2:                                                           \n",
        "  for n in range(20, 200, 7):                                                   #sample sizes\n",
        "    #ein_2 = []\n",
        "    eout_2 = []\n",
        "    #ein_10 = []\n",
        "    eout_10 = []\n",
        "    for j in range(100):\n",
        "      x, y = generate_data(n, c, 20, sigma)                                     #generating data\n",
        "      x,y = x.reshape(-1,1), y.reshape(-1,1)\n",
        "      X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.50, random_state=42) #train-test split\n",
        "      Eout2 = poly_fit(X_train, 2, y_train, X_test, y_test)                     #fitting quadratic polynomial\n",
        "      Eout10 = poly_fit(X_train, 10, y_train, X_test, y_test)                   #fitting 10th degree polynomial\n",
        "      #ein_2.append(Ein2)\n",
        "      eout_2.append(Eout2)\n",
        "      #ein_10.append(Ein10)\n",
        "      eout_10.append(Eout10)                                                                                                        \n",
        "    b = (np.mean(eout_10) - np.mean(eout_2))/n                                  #taking difference between Eout's of both fits to get overfit measure(refrence: Overfitting lecture by Abu Mostafa)\n",
        "    if(b < 7 ): Overfit_measure.append(b)                                       \n",
        "    else: Overfit_measure.append(7)                                             #the overfit measure is bounded like this in order to generate good colormaps(normalization would not work here)\n",
        "    #print(n)"
      ],
      "metadata": {
        "id": "WZqUF8Ojmj_e"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#plotting colormaps\n",
        "plt.figure( figsize=(10,7))\n",
        "x, y = np.meshgrid(range(20,200, 7), sigma_2)\n",
        "plt.scatter(x, y, c = Overfit_measure, cmap = 'rainbow', s = 300, marker = 's')\n",
        "plt.xlabel('Number of Samples')\n",
        "plt.ylabel('Variance of noise(sigma^2)')\n",
        "plt.title('Effect of varying noise on overfitting')\n",
        "cbar = plt.colorbar()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 458
        },
        "id": "mXI1o2551svW",
        "outputId": "449abf30-8022-4076-b876-9c9645f7b2e8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x504 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Overfit_measure = []                                                            #list to store overfit measure values\n",
        "for order in range(1, 100):                                                     #various degrees of polynomials\n",
        "  c = generate_coeff(order)                                                     #generating coefficients for them\n",
        "  for n in range(20, 200, 7):                                                   #sample sizes\n",
        "    #ein_2 = []\n",
        "    eout_2 = []\n",
        "    #ein_10 = []\n",
        "    eout_10 = []\n",
        "    for j in range(100):\n",
        "      x, y = generate_data(n, c, order, 0.1)                                    #generating data(sigma^2 fixed at 0.1)\n",
        "      x,y = x.reshape(-1,1), y.reshape(-1,1)\n",
        "      X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.50, random_state=42) #train-test split\n",
        "      Eout2 = poly_fit(X_train, 2, y_train, X_test, y_test)                     #fitting quadratic polynomial\n",
        "      Eout10 = poly_fit(X_train, 10, y_train, X_test, y_test)                   #fitting 10th degree polynomial\n",
        "      #ein_2.append(Ein2)\n",
        "      eout_2.append(Eout2)\n",
        "      #ein_10.append(Ein10)\n",
        "      eout_10.append(Eout10)                                                                                                        \n",
        "    b = (np.mean(eout_10) - np.mean(eout_2))/n                                  #taking difference between Eout's of both fits to get overfit measure(refrence: Overfitting lecture by Abu Mostafa)                     \n",
        "    if(b > 7 ): Overfit_measure.append(7)\n",
        "    elif(b < -7): Overfit_measure.append(-7)\n",
        "    else: Overfit_measure.append(b)                                             #the overfit measure is bounded like this in order to generate good colormaps(normalization would not work here)\n",
        "#Overfit_measure = Overfit_measure/np.linalg.norm(Overfit_measure)\n",
        "    #print(n)"
      ],
      "metadata": {
        "id": "uRLS2SOmee3b"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#plotting colormaps\n",
        "plt.figure( figsize=(10,7))\n",
        "x, y = np.meshgrid(range(20,200, 7), range(1,100))\n",
        "plt.scatter(x, y, c = Overfit_measure, cmap = 'rainbow', s = 300, marker = 's')\n",
        "plt.xlabel('Number of Samples')\n",
        "plt.ylabel('Complexity of Original Polynomial')\n",
        "plt.title('Effect of Polynomial Complexity on overfitting')\n",
        "cbar = plt.colorbar()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 458
        },
        "id": "i-c-8s6j7W0v",
        "outputId": "5ff743e3-beb9-44cd-f1b3-977d06567262"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x504 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Observations and Conclusions:\n",
        "1. As we increase noise in data, the overfitting increases for higher complex model. But, as we go on increasing sample size, it'd give you better fit.\n",
        "2. For complex target, higher order polynomial will give better fit for large number of points.\n",
        "\n",
        "\n",
        "**Note: As overfit measures were bounded for getting better graphs, there are borderline issues in the colormaps. But, without bounding the measure, graph was not showing color changes over space.**"
      ],
      "metadata": {
        "id": "HvS5uQauHoPj"
      }
    }
  ]
}